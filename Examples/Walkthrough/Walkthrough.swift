// Thank you for trying out the Mappedin iOS SDK. This is a short walkthrough that will
// get you up in running with the SDK as quickly as possible.
//
// This example is designed with all the source in a single file, this is not nessarly
// good form but was done so you as a Developer can understand the sum of the SDK without
// having to navigate around the source.
//

// First thing is first, add the Mappedin framework to your project such that it
// can be linked into the source.
import Mappedin
import CoreLocation
import VenueNextCore
import VenueNextCoreUI
import VenueNextOrderUI
import VenueNextLegacy
import VenueNextPayment
import VenueNextWalletUI
import VenueNextAnalytics
import VenueNextOrderData
import VenueNextWalletData
import VenueNextOrderService
import VenueNextWalletService
import VenueNextNetworkService

// Secondly, a `Service` _must_ be defined. The role of a `Service` is to tell our
// API what keys to use, and what data types you have defined for use in the SDK.
struct Service: Mappedin.Service {
    // First you must specify if you are using a custom `Venue` type, This is normal
    // and required for almost all of our customers.
    typealias VenueType = Venue
    let venueType = Venue.self

    //In order to use the Mappedin iOS SDK you will need an API Key and Secret.
    // To get you started we've provided a key and secret in this repo that has
    // access to some demo venues.
    //
    // When you're ready to start using your own venues with the Mappedin iOS SDK
    // you will need to contact a Mappedin representative to get your own unique
    // key and secret.
    //
    // The keys and other secret data are pinned to your app here
    // this will be used when doing any API requests to the Mappedin servers
    let apiKey = "5e2765b1a5fdf5001a6b96a2"
    let apiSecret = "kiSrpOv0rqxhGHJfWfBgmwC12EMGz3bTYlUMAFTz8q6YQd8w"
    let dataKey = "d5b94aa0"
    // not needed, just done to make sure you set the abover balues.
    init() {
        assert(apiKey != "", """
            It looks like you are using the SDK without an api key. \
            Please go to the `Service` sturcture and specifiy a key \
            secret and a data key. If you do not know this information \
            please contact your Mappedin to get access to our API.
            """
        )
    }

}

// The 1st class you will need to define is a `Venue` class. A `Venue` holds one or more
// maps and all the associated data that is needed for searching / direction wayfinding.
//
// The Venue will include custom deserialization that is supplied by Mappedin. This code
// is ridged and is best if you avoid touching it.
class Venue: Mappedin.Venue {
    // custom types can be added by our backend servers
    var typedLocations = [TypedLocation]()
    // an example Custom type, generated by our API servers
    class TypedLocation: Mappedin.Location {
        var externalId: String = ""
        required init(from buffer: inout BinaryDecoder) throws {
            try super.init(from: &buffer)
            self.externalId = try buffer.pullValue()
        }
    }
    
    // If you are including custom types you _must_ include a custom deserilization
    // initializer. This is supplied by Mappedin, and should not be modified.
    required init(inflate venueListing: VenueListing,
                  with buffer: inout BinaryDecoder) throws
    {
        try super.init(inflate: venueListing, with: &buffer)
        self.typedLocations = try buffer.pullValue()

        // location's contain a `venue` field that must be linked. with a reverse
        // link. This is done for both your convince making other APIs simpler
        self.typedLocations.forEach { $0.venue = self }
        
        // The location field contains all the possible locations, we can't magically
        // populate this array for you, so you must do it for us.
        self.locations = self.typedLocations.map{ $0 as Location }
    }
}


// To start, like any application you are going to need an AppDelegate delegate
import UIKit

// the service doesn't normally have any logic in it, and just acts as an entry
// point. So it is easy to leave it is a global rather then passing it around
// this will be up to how your company decides the best way to structure your
// code base is.
var service: Service? = nil

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
    var window: UIWindow?

    override init() {
        super.init()
        // this is the last tricky bit, the Service initializer requires
        // some extra swizzling on the AppDelegate in order allow our APIs
        // to get access to some internal messages that we need to do analytics
        // and background service integration.
        //
        // If your app crashes, you may see it walk through some of our SDK at the
        // bottom of the call stack. This is why.
        //
        // This must be initialized at this point, it's ugly, and I'm sorry this
        //  will be improved in the future. It can't be done before, nor after. :(
        service = Service(AppDelegate.self)
    }
    
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {
        let key = "vno:lyra:prd:ios-sdk-mappedin-01eayzh0eg88x1qpxjhf97yhzp"
        let secret = "CgYk9V+fuJQhQjBOxNAmKhuVHcojKOvfnNDz0VnDc9TIuR+p9gothkgXceXZN70VkrOwBcX+Ag1DE7JY32qFbg=="
        
        //Please use our provided PaymentAdapter and make sure this is called
        //before attempting to use anything that requires payment
        VenueNext.configure(paymentProcessor: PaymentAdapter())
        
        let configURL = Bundle.main.url(forResource: "mappedin_sdk_config", withExtension: "json")!
        VenueNext.shared.initialize(sdkKey: key, sdkSecret: secret, configURL: configURL) { (success, error) in
            if success {
                print("Successfully initialized SDK")
            } else {
                print(error)
            }
        }
        return true
    }

}
