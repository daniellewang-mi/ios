// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2 (swiftlang-1103.0.32.1 clang-1103.0.32.29)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VenueNextOrderUI
import CoreData
import CoreLocation
import Foundation
import Swift
import UIKit
import VenueNextAnalytics
import VenueNextCore
import VenueNextCoreUI
import VenueNextNetworkService
import VenueNextOrderData
import VenueNextOrderService
@_exported import VenueNextOrderUI
import VenueNextPayment
import os.log
import os
@objc @_inheritsConvenienceInitializers public class LineItemTableViewCell : UIKit.UITableViewCell, VenueNextCoreUI.CellIdentifiable {
  public static var identifier: Swift.String {
    get
  }
  @objc override dynamic public func awakeFromNib()
  @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
  @available(iOS 3.0, *)
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension ModifierCartEntry {
  public func lineItemDescription() -> Swift.String
  public func modifierDisplayText() -> Swift.String
}
public typealias VNOrderRoutes = VenueNextCore.DeepLinkRoute.VNOrderRoutes
extension DeepLinkRoute {
  public enum VNOrderRoutes : Swift.String, Swift.CaseIterable {
    case qrPay
    case experienceTransfer
    case experienceDetails
    case experienceItem
    case orderSummary
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [VenueNextCore.DeepLinkRoute.VNOrderRoutes]
    public static var allCases: [VenueNextCore.DeepLinkRoute.VNOrderRoutes] {
      get
    }
  }
}
@objc @_hasMissingDesignatedInitializers public class RichCheckoutTableViewController : VenueNextOrderUI.CheckoutTableViewController {
  public init(orderNumber: Swift.String, payload: Swift.String)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc deinit
  override public init(productType: VenueNextCore.ProductType)
}
@objc open class PresentableNavigationController : UIKit.UINavigationController, VenueNextCoreUI.Presentable {
  weak public var dismissDelegate: VenueNextCoreUI.DismissDelegate?
  @objc public init(rootViewController: UIKit.UIViewController, dismissDelegate: VenueNextCoreUI.DismissDelegate?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @available(iOS 5.0, *)
  @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class ExperiencesViewController : UIKit.UIViewController {
  public init(menuUUID: Swift.String, eventUUID: Swift.String?)
  public init(with menu: VenueNextOrderData.Menu)
  @objc override final public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc override final public func viewDidLoad()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension ExperiencesViewController : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc final public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @objc final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
@objc @_hasMissingDesignatedInitializers final public class MarketplaceViewController : UIKit.UIViewController {
  final public var didSelectSegment: (Swift.Int, Swift.String) -> Swift.Void {
    get
    set
  }
  final public var segments: [Swift.String] {
    get
  }
  @objc dynamic public init()
  @objc override final public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @objc override final public func viewDidLoad()
  final public func selectSegment(_ index: Swift.Int)
  final public func addSegment(_ title: Swift.String)
  final public func clearFilters()
  final public func setChild(_ childController: UIKit.UIViewController)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension VNOrder : VenueNextCore.VNModule {
  public var moduleName: Swift.String {
    get
  }
  @objc dynamic public func reset(completion: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
}
extension UINavigationController {
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
}
extension UINavigationController {
  @objc dynamic public func pushVNMenu(for menuUUID: Swift.String, eventUUID: Swift.String? = nil, productType: VenueNextCore.ProductType, animated: Swift.Bool)
  public func pushVNRvCList(for productTypes: [VenueNextCore.ProductType], title: Swift.String? = nil, animated: Swift.Bool)
  @objc(pushVNRvCList:title:animated:) dynamic public func objc_pushVNRvCList(for productTypes: Swift.Array<Swift.Int>, title: Swift.String? = nil, animated: Swift.Bool)
  @objc dynamic public func pushVNExperienceDetails(for menuUUID: Swift.String, eventUUID: Swift.String, variantUUID: Swift.String, animated: Swift.Bool)
  @objc dynamic public func pushVNOrderHistory(animated: Swift.Bool)
}
@_inheritsConvenienceInitializers @objc public class VNOrderNavigation : ObjectiveC.NSObject {
  @objc public static func receiptNavigationController(orderSummaryUUID: Swift.String, productType: VenueNextCore.ProductType, dismissDelegate: VenueNextCoreUI.DismissDelegate?) -> UIKit.UINavigationController
  @objc public static func receiptNavigationController(experienceItemUUID: Swift.String, dismissDelegate: VenueNextCoreUI.DismissDelegate?) -> UIKit.UINavigationController
  @objc public static func experienceDetailNavigationController(menuUUID: Swift.String, eventUUID: Swift.String, variantUUID: Swift.String, dismissDelegate: VenueNextCoreUI.DismissDelegate?) -> UIKit.UINavigationController
  public static func rvcNavigationController(productTypes: [VenueNextCore.ProductType], title: Swift.String? = nil, dismissDelegate: VenueNextCoreUI.DismissDelegate?) -> UIKit.UINavigationController
  @objc(rvcNavigationControllerWithProductTypes:title:dismissDelegate:) public static func objc_rvcNavigationController(productTypes: Swift.Array<Swift.Int>, title: Swift.String? = nil, dismissDelegate: VenueNextCoreUI.DismissDelegate?) -> UIKit.UINavigationController
  @objc public static func menuNavigationController(menuUUID: Swift.String, eventUUID: Swift.String? = nil, productType: VenueNextCore.ProductType, dismissDelegate: VenueNextCoreUI.DismissDelegate?) -> UIKit.UINavigationController
  @objc public static func orderHistoryNavigationController(dismissDelegate: VenueNextCoreUI.DismissDelegate?) -> UIKit.UINavigationController
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class StandTableViewCell : UIKit.UITableViewCell, VenueNextCoreUI.CellIdentifiable, VenueNextCoreUI.Registerable {
  public static var identifier: Swift.String {
    get
  }
  @objc @IBOutlet weak public var nameLabel: UIKit.UILabel!
  @objc @IBOutlet weak public var standImageView: UIKit.UIImageView!
  @objc @IBOutlet weak public var detailLabel: UIKit.UILabel!
  @objc override dynamic public func awakeFromNib()
  @objc deinit
  @available(iOS 3.0, *)
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension VNOrder : VenueNextCore.VNDeepLinkable {
  public func route<T>(for url: Foundation.URL) -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.String
  public func canHandle(url: Foundation.URL) -> Swift.Bool
  public func handle(url: Foundation.URL, presenter: UIKit.UIViewController, completion: ((Swift.Bool) -> Swift.Void)?)
}
public protocol BottomSheetViewControllerDelegate : VenueNextCoreUI.HeaderTextTableViewCellDelegate, VenueNextCoreUI.PrimaryActionTableViewCellDelegate, VenueNextCoreUI.SinglePickerSelectorTableViewCellDelegate, VenueNextCoreUI.SubtitleTableViewCellDelegate {
  func shouldDismiss(controller: VenueNextOrderUI.BottomSheetViewController) -> Swift.Bool
  func didDismiss(controller: VenueNextOrderUI.BottomSheetViewController)
}
@objc @_hasMissingDesignatedInitializers public class BottomSheetViewController : UIKit.UIViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension BottomSheetViewController : UIKit.UITableViewDataSource {
  @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TimerCard : UIKit.UIView {
  public static let recommendedSize: CoreGraphics.CGSize
  public var seconds: Foundation.TimeInterval {
    get
  }
  public var timerFinished: (() -> Swift.Void)?
  public var onDismiss: (() -> Swift.Void)?
  @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  convenience public init(seconds: Foundation.TimeInterval = 60, backgroundColor: UIKit.UIColor? = nil)
  convenience public init(seconds: Foundation.TimeInterval = 60, backgroundImage: UIKit.UIImage)
  @objc override dynamic public func awakeFromNib()
  @objc public func dismiss()
  public func startTimer(_ startDate: Foundation.Date = Date())
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MetadataManager {
  public struct MetadataGroup : Swift.Hashable {
    public typealias Element = VenueNextOrderUI.MetadataManager.MetadataType
    public var elements: [VenueNextOrderUI.MetadataManager.MetadataGroup.Element] {
      get
    }
    public let experienceSelection: VenueNextOrderUI.ExperienceSelection
    public var store: [VenueNextOrderUI.MetadataManager.MetadataType : Any] {
      get
    }
    public init(experienceSelection: VenueNextOrderUI.ExperienceSelection, types: [VenueNextOrderUI.MetadataManager.MetadataGroup.Element] = [])
    public mutating func append(_ type: VenueNextOrderUI.MetadataManager.MetadataGroup.Element)
    @discardableResult
    public mutating func remove(_ type: VenueNextOrderUI.MetadataManager.MetadataGroup.Element) throws -> VenueNextOrderUI.MetadataManager.MetadataGroup.Element?
    public subscript(index: Swift.Int) -> VenueNextOrderUI.MetadataManager.MetadataGroup.Element {
      get
    }
    public func contains(type: VenueNextOrderUI.MetadataManager.MetadataGroup.Element) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (lhs: VenueNextOrderUI.MetadataManager.MetadataGroup, rhs: VenueNextOrderUI.MetadataManager.MetadataGroup) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum MetadataType : Swift.Hashable {
    public enum Options : Swift.Hashable {
      case placeholder(text: Swift.String)
      case minimumAge(age: Swift.Int64)
      case maximumAge(age: Swift.Int64)
      case between(minAge: Swift.Int64, maxAge: Swift.Int64)
      case errorMessage(text: Swift.String)
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: VenueNextOrderUI.MetadataManager.MetadataType.Options, b: VenueNextOrderUI.MetadataManager.MetadataType.Options) -> Swift.Bool
    }
    case text(identifier: Swift.String, options: Swift.Set<VenueNextOrderUI.MetadataManager.MetadataType.Options>)
    case seat(identifier: Swift.String, options: Swift.Set<VenueNextOrderUI.MetadataManager.MetadataType.Options>)
    case date(identifier: Swift.String, options: Swift.Set<VenueNextOrderUI.MetadataManager.MetadataType.Options>)
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: VenueNextOrderUI.MetadataManager.MetadataType, b: VenueNextOrderUI.MetadataManager.MetadataType) -> Swift.Bool
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ExperienceSelection {
  @objc deinit
}
extension UIColor {
  public func image(_ size: CoreGraphics.CGSize = CGSize(width: 1, height: 1)) -> UIKit.UIImage
}
extension UIColor {
  public func toColor(_ color: UIKit.UIColor, percentage: CoreGraphics.CGFloat) -> UIKit.UIColor
}
@_inheritsConvenienceInitializers @objc public class VNOrder : ObjectiveC.NSObject {
  @objc public static let shared: VenueNextOrderUI.VNOrder
  @objc override dynamic public init()
  @objc deinit
}
extension VNOrder : VenueNextCore.VNOrderProtocol {
  @objc dynamic public func enableWallet(wallet: Any)
  @objc dynamic public func disableWallet()
}
@objc @_hasMissingDesignatedInitializers public class CheckoutTableViewController : UIKit.UITableViewController, VenueNextCoreUI.Alerting {
  @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  public init(productType: VenueNextCore.ProductType)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc override dynamic public init(style: UIKit.UITableView.Style)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension CheckoutTableViewController : CoreData.NSFetchedResultsControllerDelegate {
  @objc dynamic public func controllerDidChangeContent(_ controller: CoreData.NSFetchedResultsController<CoreData.NSFetchRequestResult>)
}
extension CheckoutTableViewController : VenueNextAnalytics.PageViewTrackable {
  @objc dynamic public var pageViewName: Swift.String {
    @objc get
  }
  @objc dynamic public var pageViewTitle: Swift.String {
    @objc get
  }
}
extension CheckoutTableViewController : VenueNextCoreUI.RoundedTextFieldViewDelegate {
  @objc dynamic public func didFinishEditing(text: Swift.String, textField: UIKit.UITextField)
  @objc dynamic public func didChangeText(text: Swift.String, textField: UIKit.UITextField)
}
extension CheckoutTableViewController : VenueNextCoreUI.DismissDelegate {
  @objc dynamic public func shouldDismiss(viewController: UIKit.UIViewController)
}
@objc @_hasMissingDesignatedInitializers public class MetadataViewController : UIKit.UIViewController {
  public typealias ValidatableViewController = UIKit.UIViewController & VenueNextCore.Validatable
  public var didCancel: () -> Swift.Void
  public var didFinish: ([VenueNextOrderUI.MetadataManager.MetadataType : Any]) -> Swift.Void
  @objc dynamic public init()
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  public func add(_ group: VenueNextOrderUI.MetadataManager.MetadataGroup)
  public func add(_ groups: [VenueNextOrderUI.MetadataManager.MetadataGroup])
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension MetadataViewController : UIKit.UIPageViewControllerDelegate, UIKit.UIPageViewControllerDataSource {
  @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @objc dynamic public func presentationCount(for pageViewController: UIKit.UIPageViewController) -> Swift.Int
  @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, didFinishAnimating finished: Swift.Bool, previousViewControllers: [UIKit.UIViewController], transitionCompleted completed: Swift.Bool)
}
public class MenuItemDetailViewModel {
  public init(for item: VenueNextOrderData.Item)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ExperienceCard : UIKit.UIView {
  public enum RedemptionStatus {
    case soon
    case now
    case redeemed
    case expired
    case none
    case refunded
    case cancel
    case transferred
    public static func == (a: VenueNextOrderUI.ExperienceCard.RedemptionStatus, b: VenueNextOrderUI.ExperienceCard.RedemptionStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var actionHandler: () -> Swift.Void
  public var redemptionStatus: VenueNextOrderUI.ExperienceCard.RedemptionStatus {
    get
    set
  }
  public static let recommendedSize: CoreGraphics.CGSize
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc convenience dynamic public init()
  public init(center: CoreGraphics.CGPoint)
  @objc override dynamic public func awakeFromNib()
  public func updateToTimer(startDate: Foundation.Date? = nil, seconds: Foundation.TimeInterval, backgroundImage: UIKit.UIImage? = nil, finished: @escaping (VenueNextOrderUI.TimerCard?) -> Swift.Void)
  public func downgradeFromTimer()
  public func resetCard()
  @objc deinit
}
open class MenuItemInteraction : VenueNextAnalytics.AnalyticsEvent {
  @objc override open var metadata: [Swift.String : Any]? {
    @objc get
  }
  public init(with item: VenueNextOrderData.Item, from screen: VenueNextAnalytics.PageViewTrackable? = nil)
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers open class AddItemEvent : VenueNextOrderUI.MenuItemInteraction {
  @objc override open var eventName: Swift.String {
    @objc get
  }
  @objc deinit
  override public init(with item: VenueNextOrderData.Item, from screen: VenueNextAnalytics.PageViewTrackable? = super)
}
@_inheritsConvenienceInitializers open class ItemDetailEvent : VenueNextOrderUI.MenuItemInteraction {
  @objc override open var eventName: Swift.String {
    @objc get
  }
  @objc deinit
  override public init(with item: VenueNextOrderData.Item, from screen: VenueNextAnalytics.PageViewTrackable? = super)
}
@_hasMissingDesignatedInitializers open class PaymentTypeEvent : VenueNextAnalytics.AnalyticsEvent {
  @objc override open var eventName: Swift.String {
    @objc get
  }
  @objc override open var metadata: [Swift.String : Any]? {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers open class OrderStatusEvent : VenueNextAnalytics.AnalyticsEvent {
  @objc override open var eventName: Swift.String {
    @objc get
  }
  @objc override open var metadata: [Swift.String : Any]? {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
extension VenueNextCore.DeepLinkRoute.VNOrderRoutes : Swift.Equatable {}
extension VenueNextCore.DeepLinkRoute.VNOrderRoutes : Swift.Hashable {}
extension VenueNextCore.DeepLinkRoute.VNOrderRoutes : Swift.RawRepresentable {}
extension VenueNextOrderUI.ExperienceCard.RedemptionStatus : Swift.Equatable {}
extension VenueNextOrderUI.ExperienceCard.RedemptionStatus : Swift.Hashable {}
